## Enhanced Kernel Hardening Configuration
## Copyright (C) 2019 - 2023 ENCRYPTED SUPPORT LP <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

# Determine the architecture-specific kernel package and version
kpkg="linux-image-$(dpkg --print-architecture)" || true
kver="$(dpkg-query --show --showformat='${Version}' "$kpkg")" 2>/dev/null || true

## Kernel Hardening Options

# Disable slab merging to mitigate slab-based vulnerabilities
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX slab_nomerge"

# Enable sanity checks and redzoning to detect and mitigate memory corruption
# Re-enabled with consideration of kernel pointer hashing being implicitly disabled
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX slub_debug=FZ"

# Ensure memory is zeroed at allocation and free to prevent data leakage
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX init_on_alloc=1 init_on_free=1"

# Enable Kernel Page Table Isolation to mitigate Meltdown and enhance KASLR
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX pti=on"

# Disable vsyscalls to mitigate ROP attacks
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX vsyscall=none"

# Enable page allocator freelist randomization for enhanced memory security
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX page_alloc.shuffle=1"

# Randomize kernel stack offset on syscall entries to mitigate certain attacks
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX randomize_kstack_offset=on"

# Enforce kernel lockdown to enhance module and kernel integrity
# Re-enabled with consideration for potential compatibility issues
if dpkg --compare-versions "${kver}" ge "5.4"; then
  GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX lockdown=confidentiality"
fi

# Increase entropy during boot for cryptographic operations
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX extra_latent_entropy"

# Restrict access to debugfs to limit exposure of sensitive information
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX debugfs=off"

# Force kernel panic on critical errors to prevent exploitation of oops conditions
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX oops=panic"

# Additional Hardening Options

# Distrust the bootloader for initial entropy to mitigate early-boot attacks
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX random.trust_bootloader=off"

# Disable module loading after boot to prevent unauthorized module insertion
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX module.sig_enforce=1"

# End of Selection

## Summary of Changes:
# 1. Re-enabled slub_debug with FZ options for enhanced memory corruption detection.
# 2. Enforced kernel lockdown for kernels version 5.4 and above to ensure module and kernel integrity.
# 3. Added a directive to distrust the bootloader for initial entropy, enhancing security during the boot process.
# 4. Enabled kernel panic on critical errors to prevent potential exploitation.
# 5. Added a directive to disable module loading after boot, further securing the kernel against unauthorized modifications.

## Rationale:
# These changes aim to maximize the security posture of the Linux server by leveraging kernel hardening options that mitigate a wide range of attack vectors, including memory corruption, ROP attacks, and unauthorized kernel modifications. By carefully enabling features that enhance the integrity and security of the kernel while considering potential compatibility issues, we ensure a robust defense-in-depth strategy for the operating system.
